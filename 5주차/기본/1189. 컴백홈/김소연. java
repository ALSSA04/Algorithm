
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	static int[] dr = { 0, -1, 0, 1 };
	static int[] dc = { 1, 0, -1, 0 };
	static int nr, nc, R, C, K,count;
	static boolean[][] visited;
	static char[][] map;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new char[R][C];
		for (int i = 0; i < R; i++) {
			map[i] = br.readLine().toCharArray();
		}

		visited = new boolean[R][C];
		nr = R - 1;
		nc = 0;
		count = 0;
		visited[nr][nc] = true;
		DFS(nr,nc,1);
		
		System.out.println(count);

	}

	static void DFS(int r, int c, int distance) {
		if (distance > K) {
			return;
		}
		if(r==0&&c==C-1) {
			if(distance == K) {
				count++;
			}
			return;
		}
		for (int i = 0; i < 4; i++) {
			int nr = r+ dr[i];
			int nc = c+ dc[i];
			
			if (nr < 0 || nr >= R || nc < 0 || nc >= C || map[nr][nc]=='T'||visited[nr][nc])
				continue;
			else {
				visited[nr][nc] = true;
				DFS(nr,nc,distance+1);
				visited[nr][nc] = false;
				
			}

		}
	}
}
